name: 🏷️ Create tag + 📦 release version
on:
  push:
    branches:
      - main

jobs:
  get_version:
    name: 🔖 Get current version
    runs-on: ubuntu-latest
    outputs:
      latest_tag: ${{ steps.get_version.outputs.latest_tag }}
      major: ${{ steps.get_version.outputs.major }}
      minor: ${{ steps.get_version.outputs.minor }}
      patch: ${{ steps.get_version.outputs.patch }}

    steps:
      - name: ✅ Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for all branches and tags

      - name: 🔖 Get current version
        id: get_version
        run: |
          git fetch --tags
          # List all tags, sort by version, and get the latest one
          latest_tag=$(git tag --sort=-v:refname | head -n 1)
          echo "Latest tag: $latest_tag"
          version=${latest_tag#v}
          IFS='.' read -r -a version_parts <<< "$version"
          echo "major=${version_parts[0]}" >> $GITHUB_OUTPUT
          echo "minor=${version_parts[1]}" >> $GITHUB_OUTPUT
          echo "patch=${version_parts[2]}" >> $GITHUB_OUTPUT
          echo "latest_tag=$latest_tag" >> $GITHUB_OUTPUT
          echo "latest_tag=$latest_tag"

  next_version:
    name: ⏭️ Get next version
    runs-on: ubuntu-latest
    needs: get_version
    outputs:
      new_tag: ${{ steps.next_version.outputs.new_tag }}
      increment: ${{ steps.next_version.outputs.increment }}

    steps:
      - name: ✅ Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for all branches and tags

      - name: ⏭️ Get next version
        id: next_version
        run: |
          major=${{ needs.get_version.outputs.major }}
          minor=${{ needs.get_version.outputs.minor }}
          patch=${{ needs.get_version.outputs.patch }}
          increment="patch"
          if git log -1 --pretty=%B | grep -iq "\[major\]"; then
            increment="major"
          elif git log -1 --pretty=%B | grep -iq "\[minor\]"; then
            increment="minor"
          fi
          case $increment in
            major)
              new_major=$((major + 1))
              new_minor=0
              new_patch=0
              ;;
            minor)
              new_major=$major
              new_minor=$((minor + 1))
              new_patch=0
              ;;
            patch)
              new_major=$major
              new_minor=$minor
              new_patch=$((patch + 1))
              ;;
          esac
          new_tag="v${new_major}.${new_minor}.${new_patch}"
          echo "new_tag=${new_tag}" >> $GITHUB_ENV
          echo "new_tag=$new_tag" >> $GITHUB_OUTPUT
          echo "increment=$increment" >> $GITHUB_OUTPUT
          echo "new tag version: $new_tag"
          echo "[$increment Version] This Release Includes $increment Updates and Enhancements."

  create_tag:
    name: 🏷️ Create tag + 🚀 push
    runs-on: ubuntu-latest
    needs: next_version

    steps:
      - name: ✅ Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for all branches and tags

      - name: 🏷️ Create tag + 🚀 push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git tag ${{ needs.next_version.outputs.new_tag }}
          git push origin ${{ needs.next_version.outputs.new_tag }}

  create_release:
    name: 📦 Create release + 🚀 push
    runs-on: ubuntu-latest
    needs: [get_version, next_version, create_tag]
    outputs:
      commit_messages: ${{ steps.get_commit_messages.outputs.commit_messages }}

    steps:
      - name: ✅ Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for all branches and tags

      - name: 📃 Get commit messages
        id: get_commit_messages
        run: |
          latest_tag=${{ needs.get_version.outputs.latest_tag }}
          commit_messages=$(git log ${latest_tag}..HEAD --pretty=format:"%h - %s")
          echo "commit_messages<<EOF" >> $GITHUB_OUTPUT
          echo "$commit_messages" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: 📦 Create release + 🚀 push
        id: create_release
        uses: actions/create-release@v1.1.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.next_version.outputs.new_tag }}
          release_name: 📦 Release ${{ needs.next_version.outputs.new_tag }}
          body: |
            🏷️ [${{ needs.next_version.outputs.new_tag }} Version]
            📦 This release includes updates and enhancements [${{ needs.next_version.outputs.increment }}].

            📃 Changes in this release:
            ${{ steps.get_commit_messages.outputs.commit_messages }}

          draft: false
          prerelease: false
